{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../About.svelte",
    "../../ColorWheel.svelte",
    "../../CopyPasteCode.svelte"
  ],
  "sourcesContent": [
    "<svelte:head>\n\t<title>SC1000 LED Ring</title>\n\t<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n\t<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,600,700\">\n\t<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto+Mono\">\n</svelte:head>\n\n<script>\n\timport About from './components/About.svelte';\n\timport ColorWheel from './components/ColorWheel.svelte';\n\timport CopyPasteCode from './components/CopyPasteCode.svelte';\n\timport Device from './components/Device.svelte';\n\n\timport TopAppBar, {Row, Section, Title} from '@smui/top-app-bar';\n</script>\n\n\n<main>\n\n\t<TopAppBar variant=\"static\" color=\"primary\">\n        <Row>\n          <Section>\n            <Title>SC1000 LED Ring Configurator</Title>\n          </Section>\n        </Row>\n    </TopAppBar>\n\n\t<div class=\"wrapper\">\n\t\t<Device/>\n\t\t<ColorWheel/>\n\t\t<CopyPasteCode/>\n\n\t\t<About/>\n\t</div>\n\n</main>\n\n\n\n<style>\n.wrapper {\n\tmargin: 0 auto;\n\tmax-width: 500px;\n}\n</style>",
    "<script>   \nimport Card, {Content} from '@smui/card';\n</script>\n\n\n<div class=\"about-container\">\n  <Card>\n    <Content>\n      <h2>About</h2>\n      <p>\n        A progressive web app to configure the LED ring pattern on your SC1000. Either directly connect to the wifi of the LED ring to directly configure it or copy the generated code into the LUA <span class=\"code\">pattern.lua</span> config.\n      </p>\n      <p>\n        This app is part of the <a href=\"https://github.com/rasteri/SC1000\" target=\"_blank\" title=\"github.com/rasteri/SC1000\">SC1000 project</a>.\n      </p>\n    </Content>\n  </Card>\n</div>\n\n\n<style>\n.about-container {\n  margin-top: 70px;\n}\n</style>",
    "<script>   \nimport { configManager, configStore } from '../stores.js';\nimport { hexToRgb, rgbToHex } from './color-helpers.js';\nimport { angleToLedPosition, ledPositionToAngle } from './rotation-helpers.js';\n\nimport PresetsButton from './PresetsButton.svelte';\n\nimport Card, {Content, Actions, ActionButtons, ActionIcons} from '@smui/card';\n\n\nlet deviceConfig;\nconst unsubscribeLedPatternConfig = configStore.subscribe(value => {\n    deviceConfig = value;\n});\n\n\nlet w; // read-only binding for the container width\n\nlet ledConfigs, ledCount;\nlet tan, degreePerLed;\n\nconst colorOffHex = \"#000000\";\n\n$: { /* Rerun this whole block, if the config changed */\n\n    ledCount = deviceConfig.ledCount;\n    tan = Math.tan(Math.PI/ledCount);\n    degreePerLed = 360 / ledCount;\n\n    // Initialize the LED config list for all possible LEDs\n    ledConfigs = [];\n    for (let idx = 0; idx < ledCount; idx++) {\n        const ledPos = idx + 1;\n        ledConfigs[idx] = {\n            color: {r: 0, g: 0, b:0},\n            colorHex: colorOffHex,\n            angleOffset: ledPositionToAngle(ledPos, degreePerLed),\n        };\n    }\n\n    // Update the LED config from pattern (set colors)\n    for (let patternStep of deviceConfig.pattern) {\n        let pos = angleToLedPosition(patternStep.angleOffset, degreePerLed);\n        let idx = pos - 1;\n        ledConfigs[idx].color = {r: patternStep.colorR, g: patternStep.colorG, b:patternStep.colorB};\n        ledConfigs[idx].colorHex = rgbToHex(\n            patternStep.colorR, patternStep.colorG, patternStep.colorB\n        );\n    }\n}\n\nconst setColorForLED = (ev, ledPos) => {\n    const color = hexToRgb(ev.target.value);\n    const _angle = ledPositionToAngle(ledPos, degreePerLed);\n    configManager.setPatternStep(_angle, color.r, color.g, color.b);\n}\n</script>\n\n\n<Card>\n    <Content>\n        <h2 class=\"mdc-typography--headline6\">Pattern configuratorn</h2>\n        <p>\n            LED count: {ledCount} <span class=\"text-small\">(results in {degreePerLed}° rotation per LED)</span>\n        </p>\n\n        <!-- Circular Design based on https://stackoverflow.com/questions/12813573/position-icons-into-circle -->\n        <div class=\"color-wheel\" style=\"--m: {ledCount}; --tan: {tan}; --w: {w}\" bind:clientWidth=\"{w}\">\n        {#each ledConfigs as ledConfig, idx}\n            <input style=\"--i: {idx}\" \n                type=\"color\" \n                value=\"{ledConfig.colorHex}\" \n                name=\"c-{idx}\" \n                class=\"colorpicker {ledConfig.colorHex === colorOffHex ? 'colorpicker-non-active' : ''}\" \n                on:change={(ev) => setColorForLED(ev, idx+1)}\n                title=\"{ledConfig.angleOffset}° - LED position {idx+1} (index {idx})\"\n                />\n                \n        {/each}\n        </div>\n    </Content>\n    <Actions>\n        <ActionButtons>\n            <PresetsButton/>\n        </ActionButtons>\n    </Actions>\n</Card>\n\n<style>\n.color-wheel {\n  --d: calc(1px * var(--w) / (var(--m)*2.6) ); /* element size */\n  --r: calc(.5*var(--d)/var(--tan)); /* circle radius */\n  --s: calc(2*var(--r) + var(--d)); /* minimum container size */\n  position: relative;\n  min-width: var(--s);\n  min-height: var(--s);\n  margin-top: 15px;\n}\n.color-wheel .colorpicker {\n  position: absolute;\n  top: 50%; left: 50%;\n  width: var(--d); \n  height: var(--d);\n  margin: calc(-.5*var(--d));\n  padding: 0;\n  border: 1px solid white;\n  --az: calc(1turn*(var(--i))/var(--m) + 0.75turn); /* +0.75turn to put 0° on top*/\n  transform: rotate(var(--az)) translate(var(--r)); \n  cursor: pointer;\n}\n.color-wheel .colorpicker-non-active {\n  opacity: 0.2;\n  border: 1px dotted black;\n}\n</style>",
    "<script>   \nimport { configStore } from '../stores.js';\n\nimport Card, {Content, Actions, ActionButtons, ActionIcons} from '@smui/card';\n\n\nlet deviceConfig;\nconst unsubscribeLedPatternConfig = configStore.subscribe(value => {\n    deviceConfig = value;\n});\n</script>\n\n\n<Card>\n    <Content>\n        <h2>LUA code</h2>\n        <p>\n          LUA code to be copy & pasted directly to <span class=\"code\">pattern.lua</span> file.\n        </p>\n\n        <pre class=\"pre\">\nPATTERN = {'{'}\n{#each deviceConfig.pattern as patternStep}\n  {'  {angle_offset='+patternStep.angleOffset+', r='+patternStep.colorR+', g='+patternStep.colorG+', b='+patternStep.colorB+'},'}\n{/each}{'}'}\n        </pre>\n    </Content>\n</Card>\n\n\n<style>\n.pre {\n  color: #444;\n  padding: 10px;\n  background: #dddddd;\n  border-radius: 5px;\n}\n</style>"
  ],
  "names": [],
  "mappings": "AAwCA,QAAQ,cAAC,CAAC,AACT,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,KAAK,AACjB,CAAC;ACtBD,gBAAgB,eAAC,CAAC,AAChB,UAAU,CAAE,IAAI,AAClB,CAAC;ACkED,YAAY,8BAAC,CAAC,AACZ,GAAG,CAAE,sCAAsC,CAC3C,GAAG,CAAE,4BAA4B,CACjC,GAAG,CAAE,2BAA2B,CAChC,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,IAAI,GAAG,CAAC,CACnB,UAAU,CAAE,IAAI,GAAG,CAAC,CACpB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,2BAAY,CAAC,YAAY,eAAC,CAAC,AACzB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,GAAG,CACnB,KAAK,CAAE,IAAI,GAAG,CAAC,CACf,MAAM,CAAE,IAAI,GAAG,CAAC,CAChB,MAAM,CAAE,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAC1B,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,IAAI,CAAE,0CAA0C,CAChD,SAAS,CAAE,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAChD,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,2BAAY,CAAC,uBAAuB,eAAC,CAAC,AACpC,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,KAAK,AAC1B,CAAC;AClFD,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,GAAG,AACpB,CAAC"
}